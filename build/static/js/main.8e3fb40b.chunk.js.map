{"version":3,"sources":["Component/FormValidator.js","App.js","index.js"],"names":["FormValidator","React","Component","constructor","super","handleFieldChange","e","newState","this","state","target","name","value","validateForm","handleSetTouched","field","isTouched","setState","fields","forEach","fieldName","newField","errors","isValid","formValidationRules","vRule","rule","push","message","validationRules","required","val","undefined","phone","test","String","email","toLowerCase","givenName","lastName","componentDidMount","render","className","onChange","onBlur","length","map","err","i","key","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8e3fb40b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class FormValidator extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    const validationRules = {\r\n      required: (val) => val !== null && val !== undefined && val !== \"\",\r\n      phone: (phone) => {\r\n        const re = /^[0][1-9]\\d{9}$|^[1-9]\\d{9}$/;\r\n        return re.test(String(phone));\r\n      },\r\n      email: (email) => {\r\n        const re = /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/;\r\n        return re.test(String(email).toLowerCase());\r\n      },\r\n    };\r\n\r\n    this.formValidationRules = {\r\n      givenName: [\r\n        {\r\n          rule: validationRules.required,\r\n          message: \"Given Name is required\",\r\n        },\r\n      ],\r\n      lastName: [\r\n        {\r\n          rule: validationRules.required,\r\n          message: \"Last Name is required\",\r\n        },\r\n      ],\r\n      phone: [\r\n        {\r\n          rule: validationRules.phone,\r\n          message: \"Your Phone No is invalid\",\r\n        },\r\n      ],\r\n      email: [\r\n        {\r\n          rule: validationRules.required,\r\n          message: \"Email is required\",\r\n        },\r\n        {\r\n          rule: validationRules.email,\r\n          message: \"Email is invalid\",\r\n        },\r\n      ],\r\n    };\r\n\r\n    this.fields = [\"givenName\", \"lastName\", \"phone\", \"email\"];\r\n\r\n    this.state = {\r\n      givenName: {\r\n        value: \"\",\r\n        isTouched: false,\r\n        isValid: false,\r\n        errors: \"\",\r\n      },\r\n      lastName: {\r\n        value: \"\",\r\n        isTouched: false,\r\n        isValid: false,\r\n        errors: \"\",\r\n      },\r\n      phone: {\r\n        value: \"\",\r\n        isTouched: false,\r\n        isValid: false,\r\n        errors: \"\",\r\n      },\r\n      email: {\r\n        value: \"\",\r\n        isTouched: false,\r\n        isValid: false,\r\n        errors: [],\r\n      },\r\n    };\r\n  }\r\n\r\n  handleFieldChange = (e) => {\r\n    let newState = { ...this.state };\r\n    newState[e.target.name].value = e.target.value;\r\n    this.validateForm(newState);\r\n  };\r\n\r\n  handleSetTouched = (e) => {\r\n    let field = { ...this.state[e.target.name], isTouched: true };\r\n    this.setState({ [e.target.name]: { ...field } });\r\n  };\r\n\r\n  validateForm = (newState) => {\r\n    // Check if parameter called newState have value or not\r\n    newState = newState || { ...this.state };\r\n    this.fields.forEach((fieldName) => {\r\n      let newField = newState[fieldName];\r\n      newField.errors = [];\r\n      newField.isValid = true;\r\n      this.formValidationRules[fieldName].forEach((vRule) => {\r\n        // Check if the property called errors is empty\r\n        if (!vRule.rule(this.state[fieldName].value)) {\r\n          // Insert the error messages from the object called formValidationRules in the state object\r\n          newField.errors.push(vRule.message);\r\n          newField.isValid = false;\r\n        }\r\n        newState[fieldName] = newField;\r\n      });\r\n    });\r\n    // Change all properties in the state object\r\n    this.setState(newState);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.validateForm();\r\n  }\r\n  \r\n  render() {\r\n    const { givenName, lastName, phone, email } = this.state;\r\n    return (\r\n      <form>\r\n        <div className=\"fieldGroup\">\r\n          <h2>Form Validation</h2>\r\n          <label>Given Name</label>\r\n          <input\r\n            className={\r\n              givenName.isTouched && !givenName.isValid ? \"has-error\" : \"\"\r\n            }\r\n            name=\"givenName\"\r\n            value={givenName.value}\r\n            onChange={this.handleFieldChange}\r\n            onBlur={this.handleSetTouched}\r\n          />\r\n          {givenName.isTouched &&\r\n            givenName.errors.length > 0 &&\r\n            givenName.errors.map((err, i) => (\r\n              <span key={i} className=\"errorMessage\">\r\n                {err}\r\n              </span>\r\n            ))}\r\n        </div>\r\n        <div className=\"fieldGroup\">\r\n          <label>Last Name</label>\r\n          <input\r\n            className={\r\n              lastName.isTouched && !lastName.isValid ? \"has-error\" : \"\"\r\n            }\r\n            name=\"lastName\"\r\n            value={this.state.lastName.value}\r\n            onChange={this.handleFieldChange}\r\n            onBlur={this.handleSetTouched}\r\n          />\r\n          {lastName.isTouched &&\r\n            lastName.errors.length > 0 &&\r\n            lastName.errors.map((err, i) => (\r\n              <span key={i} className=\"errorMessage\">\r\n                {err}\r\n              </span>\r\n            ))}\r\n        </div>\r\n        <div className=\"fieldGroup\">\r\n          <label>1 Phone No (09)</label>\r\n          <input\r\n            className={phone.isTouched && !phone.isValid ? \"has-error\" : \"\"}\r\n            name=\"phone\"\r\n            value={this.state.phone.value}\r\n            onChange={this.handleFieldChange}\r\n            onBlur={this.handleSetTouched}\r\n          />\r\n          {phone.isTouched &&\r\n            phone.errors.length > 0 &&\r\n            phone.errors.map((err, i) => (\r\n              <span key={i} className=\"errorMessage\">\r\n                {err}\r\n              </span>\r\n            ))}\r\n        </div>\r\n        <div className=\"fieldGroup\">\r\n          <label>Email</label>\r\n          <input\r\n            className={email.isTouched && !email.isValid ? \"has-error\" : \"\"}\r\n            name=\"email\"\r\n            value={this.state.email.value}\r\n            onChange={this.handleFieldChange}\r\n            onBlur={this.handleSetTouched}\r\n          />\r\n          {email.isTouched &&\r\n            email.errors.length > 0 &&\r\n            email.errors.map((err, i) => (\r\n              <span key={i} className=\"errorMessage\">\r\n                {err}\r\n              </span>\r\n            ))}\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport FormValidator from \"./Component/FormValidator\";\nimport \"./App.css\";\n\nfunction App(){\n    return <FormValidator />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}